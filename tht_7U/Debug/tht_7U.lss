
tht_7U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800060  00800060  00000ad0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a8  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a60  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b1c  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000034d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061a  00000000  00000000  00003e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000445b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_3>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  54:	08 00       	.word	0x0008	; ????
  56:	00 00       	nop
  58:	be 92       	st	-X, r11
  5a:	24 49       	sbci	r18, 0x94	; 148
  5c:	12 3e       	cpi	r17, 0xE2	; 226
  5e:	ab aa       	std	Y+51, r10	; 0x33
  60:	aa 2a       	or	r10, r26
  62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
  64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
  66:	4c 3e       	cpi	r20, 0xEC	; 236
  68:	00 00       	nop
  6a:	00 80       	ld	r0, Z
  6c:	be ab       	std	Y+54, r27	; 0x36
  6e:	aa aa       	std	Y+50, r10	; 0x32
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	00 00       	nop
  74:	00 00       	nop
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 08       	sbc	r0, r0
  82:	41 78       	andi	r20, 0x81	; 129
  84:	d3 bb       	out	0x13, r29	; 19
  86:	43 87       	std	Z+11, r20	; 0x0b
  88:	d1 13       	cpse	r29, r17
  8a:	3d 19       	sub	r19, r13
  8c:	0e 3c       	cpi	r16, 0xCE	; 206
  8e:	c3 bd       	out	0x23, r28	; 35
  90:	42 82       	std	Z+2, r4	; 0x02
  92:	ad 2b       	or	r26, r29
  94:	3e 68       	ori	r19, 0x8E	; 142
  96:	ec 82       	std	Y+4, r14	; 0x04
  98:	76 be       	out	0x36, r7	; 54
  9a:	d9 8f       	std	Y+25, r29	; 0x19
  9c:	e1 a9       	ldd	r30, Z+49	; 0x31
  9e:	3e 4c       	sbci	r19, 0xCE	; 206
  a0:	80 ef       	ldi	r24, 0xF0	; 240
  a2:	ff be       	out	0x3f, r15	; 63
  a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <log+0x68>
  a6:	ff 7f       	andi	r31, 0xFF	; 255
  a8:	3f 00       	.word	0x003f	; ????
  aa:	00 00       	nop
	...

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf e5       	ldi	r28, 0x5F	; 95
  b4:	d4 e0       	ldi	r29, 0x04	; 4
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	a0 e6       	ldi	r26, 0x60	; 96
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ec e5       	ldi	r30, 0x5C	; 92
  c2:	fa e0       	ldi	r31, 0x0A	; 10
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
  c6:	05 90       	lpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a0 36       	cpi	r26, 0x60	; 96
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	a0 e6       	ldi	r26, 0x60	; 96
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a1 3d       	cpi	r26, 0xD1	; 209
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  e4:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <timer2_init>:

void timer2_init(void)
{
	/* check for ctc and 500 Hz 128 prescaler */
	/* TIMSK OCIE2 fntmilli = 0  */
	TCCR2 |= ((1<<WGM21) | (1<<CS22));
  ec:	85 b5       	in	r24, 0x25	; 37
  ee:	8c 60       	ori	r24, 0x0C	; 12
  f0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 124;
  f2:	8c e7       	ldi	r24, 0x7C	; 124
  f4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
  f6:	89 b7       	in	r24, 0x39	; 57
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	89 bf       	out	0x39, r24	; 57
	TCNT2 = 0;
  fc:	14 bc       	out	0x24, r1	; 36
	fcnt_millis = 0;
  fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 10a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	/* Turn on interrupt */
	sei();
 10e:	78 94       	sei
 110:	08 95       	ret

00000112 <__vector_3>:
}

ISR(TIMER2_COMP_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	fcnt_millis++;
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13c:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 140:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	a1 1d       	adc	r26, r1
 148:	b1 1d       	adc	r27, r1
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 152:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 156:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	callback();
 15a:	0e 94 41 01 	call	0x282	; 0x282 <callback>
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <USART_init>:
#include "USART.h"

unsigned char USART_init(uint32_t baud_rate)
{
	/* Initialize Q */
	UQFront = UQEnd = -1;
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <UQEnd>
 186:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <UQFront>
	
	uint16_t ubrrvalue = (F_CPU/(baud_rate * 8) - 1);
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	bb 1f       	adc	r27, r27
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	9c 01       	movw	r18, r24
 1a0:	ad 01       	movw	r20, r26
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	44 1f       	adc	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	72 e1       	ldi	r23, 0x12	; 18
 1ae:	8a e7       	ldi	r24, 0x7A	; 122
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodsi4>
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	31 09       	sbc	r19, r1
	if(ubrrvalue <= 0)
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <USART_init+0x56>
		return USART_ERROR;
	}
	
	else
	{		
		UBRRH = (ubrrvalue >> 8);
 1bc:	30 bd       	out	0x20, r19	; 32
		UBRRL = 8;
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	89 b9       	out	0x09, r24	; 9
// 		UBRRH = 0;
// 		UBRRL = 12;
	
		UCSRC = (1<<URSEL) | (3<<UCSZ0);
 1c2:	86 e8       	ldi	r24, 0x86	; 134
 1c4:	80 bd       	out	0x20, r24	; 32
/*		UCSRB |= ((1<<RXCIE) | (1<<RXEN) | (1 << TXEN));*/
		UCSRB |= ((1<<RXEN) | (1<<TXEN));
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	88 61       	ori	r24, 0x18	; 24
 1ca:	8a b9       	out	0x0a, r24	; 10
		UCSRA |= ((1<<U2X));
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	8b b9       	out	0x0b, r24	; 11
		
/*		sei();*/
		
		return USART_OK;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret
	UQFront = UQEnd = -1;
	
	uint16_t ubrrvalue = (F_CPU/(baud_rate * 8) - 1);
	if(ubrrvalue <= 0)
	{
		return USART_ERROR;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
		
/*		sei();*/
		
		return USART_OK;
	}
}
 1d8:	08 95       	ret

000001da <UWriteData>:
void UWriteData(char data)
{
	/* wait till data register is not empty */
	while(!(UCSRA & (1<<UDRE)));
 1da:	5d 9b       	sbis	0x0b, 5	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <UWriteData>
	
	/* Write data to the data register of UART */
	UDR = data;
 1de:	8c b9       	out	0x0c, r24	; 12
 1e0:	08 95       	ret

000001e2 <main>:
uint16_t r = 65;

int main(void)
{
// 	DDRA |= (1<<0);
	DDRA |= (1<<1);
 1e2:	8a b3       	in	r24, 0x1a	; 26
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	8a bb       	out	0x1a, r24	; 26
	
	USART_init(115200);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	72 ec       	ldi	r23, 0xC2	; 194
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 c0 00 	call	0x180	; 0x180 <USART_init>
 	
	spi_init_master();
 1f4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <spi_init_master>
	
	MAX31865_RTD_configure(True, True, False, False, MAX31865_FAULT_DETECTION_NONE, True, True, 0x0000, 0x00ff);
 1f8:	88 24       	eor	r8, r8
 1fa:	8a 94       	dec	r8
 1fc:	91 2c       	mov	r9, r1
 1fe:	a1 2c       	mov	r10, r1
 200:	b1 2c       	mov	r11, r1
 202:	cc 24       	eor	r12, r12
 204:	c3 94       	inc	r12
 206:	ee 24       	eor	r14, r14
 208:	e3 94       	inc	r14
 20a:	00 e0       	ldi	r16, 0x00	; 0
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 67 01 	call	0x2ce	; 0x2ce <MAX31865_RTD_configure>
	
	timer2_init();
 21a:	0e 94 76 00 	call	0xec	; 0xec <timer2_init>
	
    /* Replace with your application code */
    while (1) 
    {
		if(fcnt_millis >= 10)
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 222:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 226:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 22a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 22e:	0a 97       	sbiw	r24, 0x0a	; 10
 230:	a1 05       	cpc	r26, r1
 232:	b1 05       	cpc	r27, r1
 234:	a4 f3       	brlt	.-24     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			fcnt_millis = 0;
 236:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 242:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			
			PORTA ^= (1<<1);
 246:	9b b3       	in	r25, 0x1b	; 27
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	89 27       	eor	r24, r25
 24c:	8b bb       	out	0x1b, r24	; 27
			MAX31865_read_all();
 24e:	0e 94 ac 01 	call	0x358	; 0x358 <MAX31865_read_all>
			
			uint16_t tmp = (NTC_read_resistance() * 10);
 252:	0e 94 14 02 	call	0x428	; 0x428 <NTC_read_resistance>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e2       	ldi	r20, 0x20	; 32
 25c:	51 e4       	ldi	r21, 0x41	; 65
 25e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 262:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 266:	eb 01       	movw	r28, r22
			
			if(tmp >= 550)
 268:	c6 32       	cpi	r28, 0x26	; 38
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	d8 07       	cpc	r29, r24
 26e:	10 f0       	brcs	.+4      	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
			tmp = 550;
 270:	c6 e2       	ldi	r28, 0x26	; 38
 272:	d2 e0       	ldi	r29, 0x02	; 2
			UWriteData((tmp >> 8) & (0x00ff));
 274:	8d 2f       	mov	r24, r29
 276:	0e 94 ed 00 	call	0x1da	; 0x1da <UWriteData>
			UWriteData(tmp & (0x00ff));
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 ed 00 	call	0x1da	; 0x1da <UWriteData>
 280:	ce cf       	rjmp	.-100    	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>

00000282 <callback>:
// 		_delay_ms(1000);

    }
}
void callback(void)
{
 282:	08 95       	ret

00000284 <MAX31865_RTD_reconfigure>:
	MAX31865_RTD_reconfigure(True);
}

void MAX31865_RTD_reconfigure(uint8_t all)
{
	if(all)
 284:	88 23       	and	r24, r24
 286:	a9 f0       	breq	.+42     	; 0x2b2 <MAX31865_RTD_reconfigure+0x2e>
	{
		uint8_t threshold = 0;
		PORTA &= ~(1<<0);
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	8b bb       	out	0x1b, r24	; 27
		spi_transmit(0x83);
 28e:	83 e8       	ldi	r24, 0x83	; 131
 290:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
		spi_transmit(0xff);
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
		spi_transmit(0xff);
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
// 		spi_transmit(threshold);
// 		threshold = (configure_low_threshold);
// 		spi_transmit((threshold >> 8) & 0x00ff);
// 		threshold |= (configure_low_threshold);
// 		spi_transmit((threshold) & 0x00ff);
		spi_transmit(0x00);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
		spi_transmit(0x00);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
		PORTA |= (1<<0);
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	8b bb       	out	0x1b, r24	; 27
	}
	
	PORTA &= ~(1<<0);
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	8e 7f       	andi	r24, 0xFE	; 254
 2b6:	8b bb       	out	0x1b, r24	; 27
	spi_transmit(0x80);
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
	spi_transmit(configure_control_bits);
 2be:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <configure_control_bits>
 2c2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
	PORTA |= (1<<0);
 2c6:	8b b3       	in	r24, 0x1b	; 27
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	8b bb       	out	0x1b, r24	; 27
 2cc:	08 95       	ret

000002ce <MAX31865_RTD_configure>:
#include "spi.h"
#include "define.h"
#include "USART.h"

void MAX31865_RTD_configure(uint8_t v_bias, uint8_t conversion_mode, uint8_t single_shot, uint8_t three_wire, uint16_t fault_detection, uint8_t fault_status, uint8_t filter, uint16_t low_threshold, uint16_t high_threshold)
{
 2ce:	8f 92       	push	r8
 2d0:	9f 92       	push	r9
 2d2:	af 92       	push	r10
 2d4:	bf 92       	push	r11
 2d6:	cf 92       	push	r12
 2d8:	ef 92       	push	r14
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t control_bits = 0;
	control_bits |= (v_bias ? 0x80 : 0);
 2e2:	88 23       	and	r24, r24
 2e4:	11 f0       	breq	.+4      	; 0x2ea <MAX31865_RTD_configure+0x1c>
 2e6:	90 e8       	ldi	r25, 0x80	; 128
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <MAX31865_RTD_configure+0x1e>
 2ea:	90 e0       	ldi	r25, 0x00	; 0
	control_bits |= (conversion_mode ? 0x40 : 0);
 2ec:	66 23       	and	r22, r22
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <MAX31865_RTD_configure+0x26>
 2f0:	80 e4       	ldi	r24, 0x40	; 64
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <MAX31865_RTD_configure+0x28>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	89 2b       	or	r24, r25
	control_bits |= (single_shot ? 0x20 : 0);
 2f8:	44 23       	and	r20, r20
 2fa:	11 f0       	breq	.+4      	; 0x300 <MAX31865_RTD_configure+0x32>
 2fc:	90 e2       	ldi	r25, 0x20	; 32
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <MAX31865_RTD_configure+0x34>
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	89 2b       	or	r24, r25
	control_bits |= (three_wire ? 0x10 : 0);
 304:	22 23       	and	r18, r18
 306:	11 f0       	breq	.+4      	; 0x30c <MAX31865_RTD_configure+0x3e>
 308:	90 e1       	ldi	r25, 0x10	; 16
 30a:	01 c0       	rjmp	.+2      	; 0x30e <MAX31865_RTD_configure+0x40>
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	89 2b       	or	r24, r25
	control_bits |= (fault_detection & 0x001100);
	control_bits |= (fault_status ? 0x02 : 0);
 310:	ee 20       	and	r14, r14
 312:	11 f0       	breq	.+4      	; 0x318 <MAX31865_RTD_configure+0x4a>
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	01 c0       	rjmp	.+2      	; 0x31a <MAX31865_RTD_configure+0x4c>
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	89 2b       	or	r24, r25
	control_bits |= (filter ? 0x01 : 0);
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	c1 10       	cpse	r12, r1
 320:	01 c0       	rjmp	.+2      	; 0x324 <MAX31865_RTD_configure+0x56>
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	89 2b       	or	r24, r25
	
	configure_control_bits = control_bits;
 326:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <configure_control_bits>
	configure_low_threshold = low_threshold;
 32a:	b0 92 ca 00 	sts	0x00CA, r11	; 0x8000ca <configure_low_threshold+0x1>
 32e:	a0 92 c9 00 	sts	0x00C9, r10	; 0x8000c9 <configure_low_threshold>
	configure_high_threshold = high_threshold;
 332:	90 92 c8 00 	sts	0x00C8, r9	; 0x8000c8 <configure_high_threshold+0x1>
 336:	80 92 c7 00 	sts	0x00C7, r8	; 0x8000c7 <configure_high_threshold>
	
	MAX31865_RTD_reconfigure(True);
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 42 01 	call	0x284	; 0x284 <MAX31865_RTD_reconfigure>
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	ef 90       	pop	r14
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	08 95       	ret

00000352 <status>:
}

uint8_t status(void)
{
	return(measured_status);
}
 352:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <measured_status>
 356:	08 95       	ret

00000358 <MAX31865_read_all>:
	spi_transmit(configure_control_bits);
	PORTA |= (1<<0);
}

uint8_t MAX31865_read_all(void)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
	uint16_t combined_bytes = 0;

	PORTA &= ~(1<<0);	// CS_LOW - activate slave
 35c:	8b b3       	in	r24, 0x1b	; 27
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	8b bb       	out	0x1b, r24	; 27
	
	spi_transmit(0x00);
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 73 02 	call	0x4e6	; 0x4e6 <spi_transmit>
	measured_configuration = spi_tranciever(0x00);
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 36e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <measured_configuration>
	
	combined_bytes = (spi_tranciever(0x00) << 8);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	c9 2f       	mov	r28, r25
 37c:	d8 2f       	mov	r29, r24
	combined_bytes |= (spi_tranciever(0x00));
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 384:	c8 2b       	or	r28, r24
	measured_resistance = (combined_bytes >> 1);
 386:	d6 95       	lsr	r29
 388:	c7 95       	ror	r28
 38a:	d0 93 d0 00 	sts	0x00D0, r29	; 0x8000d0 <measured_resistance+0x1>
 38e:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <measured_resistance>
	
	combined_bytes = (spi_tranciever(0x00) << 8);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	c9 2f       	mov	r28, r25
 39c:	d8 2f       	mov	r29, r24
	combined_bytes |= (spi_tranciever(0x00));
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 3a4:	c8 2b       	or	r28, r24
	measured_high_threshold = combined_bytes;
 3a6:	d0 93 ce 00 	sts	0x00CE, r29	; 0x8000ce <measured_high_threshold+0x1>
 3aa:	c0 93 cd 00 	sts	0x00CD, r28	; 0x8000cd <measured_high_threshold>
	
	combined_bytes = (spi_tranciever(0x00) << 8);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	c9 2f       	mov	r28, r25
 3b8:	d8 2f       	mov	r29, r24
	combined_bytes |= (spi_tranciever(0x00));
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 3c0:	c8 2b       	or	r28, r24
	measured_low_threshold = combined_bytes;
 3c2:	d0 93 c6 00 	sts	0x00C6, r29	; 0x8000c6 <measured_low_threshold+0x1>
 3c6:	c0 93 c5 00 	sts	0x00C5, r28	; 0x8000c5 <measured_low_threshold>
	
	measured_status = spi_tranciever(0x00);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 77 02 	call	0x4ee	; 0x4ee <spi_tranciever>
 3d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <measured_status>
	
	PORTA |= (1<<0);
 3d4:	8b b3       	in	r24, 0x1b	; 27
 3d6:	81 60       	ori	r24, 0x01	; 1
 3d8:	8b bb       	out	0x1b, r24	; 27
	
	if((measured_resistance == 0) || (measured_status != 0))
 3da:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <measured_resistance>
 3de:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <measured_resistance+0x1>
 3e2:	89 2b       	or	r24, r25
 3e4:	21 f0       	breq	.+8      	; 0x3ee <MAX31865_read_all+0x96>
 3e6:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <measured_status>
 3ea:	88 23       	and	r24, r24
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <MAX31865_read_all+0x9c>
	{
		MAX31865_RTD_reconfigure(True);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 42 01 	call	0x284	; 0x284 <MAX31865_RTD_reconfigure>
	}
	
	return(status());
 3f4:	0e 94 a9 01 	call	0x352	; 0x352 <status>
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <resistance>:
	return(measured_status);
}

float resistance(void)
{
	return((double)measured_resistance*18000/(double)32767);
 3fe:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <measured_resistance>
 402:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <measured_resistance+0x1>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 8a 03 	call	0x714	; 0x714 <__floatunsisf>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 ea       	ldi	r19, 0xA0	; 160
 412:	4c e8       	ldi	r20, 0x8C	; 140
 414:	56 e4       	ldi	r21, 0x46	; 70
 416:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	3e ef       	ldi	r19, 0xFE	; 254
 41e:	4f ef       	ldi	r20, 0xFF	; 255
 420:	56 e4       	ldi	r21, 0x46	; 70
 422:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__divsf3>
}
 426:	08 95       	ret

00000428 <NTC_read_resistance>:
	}
	
	return(status());
}
float NTC_read_resistance()
{
 428:	8f 92       	push	r8
 42a:	9f 92       	push	r9
 42c:	af 92       	push	r10
 42e:	bf 92       	push	r11
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
	double logR = log(resistance());
 438:	0e 94 ff 01 	call	0x3fe	; 0x3fe <resistance>
 43c:	0e 94 20 04 	call	0x840	; 0x840 <log>
 440:	6b 01       	movw	r12, r22
 442:	7c 01       	movw	r14, r24
	double logR3 = logR * logR * logR;
 444:	9b 01       	movw	r18, r22
 446:	ac 01       	movw	r20, r24
 448:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 44c:	9b 01       	movw	r18, r22
 44e:	ac 01       	movw	r20, r24
 450:	c7 01       	movw	r24, r14
 452:	b6 01       	movw	r22, r12
 454:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 458:	4b 01       	movw	r8, r22
 45a:	5c 01       	movw	r10, r24
	double Temp = 1/(NTC_A + NTC_B * logR + NTC_C * logR3);
 45c:	25 e0       	ldi	r18, 0x05	; 5
 45e:	30 ea       	ldi	r19, 0xA0	; 160
 460:	46 e7       	ldi	r20, 0x76	; 118
 462:	59 e3       	ldi	r21, 0x39	; 57
 464:	c7 01       	movw	r24, r14
 466:	b6 01       	movw	r22, r12
 468:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 46c:	2a ee       	ldi	r18, 0xEA	; 234
 46e:	34 e8       	ldi	r19, 0x84	; 132
 470:	46 e8       	ldi	r20, 0x86	; 134
 472:	5a e3       	ldi	r21, 0x3A	; 58
 474:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__addsf3>
 478:	6b 01       	movw	r12, r22
 47a:	7c 01       	movw	r14, r24
 47c:	2d e5       	ldi	r18, 0x5D	; 93
 47e:	3e e7       	ldi	r19, 0x7E	; 126
 480:	4f e9       	ldi	r20, 0x9F	; 159
 482:	53 e3       	ldi	r21, 0x33	; 51
 484:	c5 01       	movw	r24, r10
 486:	b4 01       	movw	r22, r8
 488:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 48c:	9b 01       	movw	r18, r22
 48e:	ac 01       	movw	r20, r24
 490:	c7 01       	movw	r24, r14
 492:	b6 01       	movw	r22, r12
 494:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__addsf3>
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e8       	ldi	r24, 0x80	; 128
 4a2:	9f e3       	ldi	r25, 0x3F	; 63
 4a4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__divsf3>
	return (Temp - 273.15);
 4a8:	23 e3       	ldi	r18, 0x33	; 51
 4aa:	33 e9       	ldi	r19, 0x93	; 147
 4ac:	48 e8       	ldi	r20, 0x88	; 136
 4ae:	53 e4       	ldi	r21, 0x43	; 67
 4b0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__subsf3>
}
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	bf 90       	pop	r11
 4be:	af 90       	pop	r10
 4c0:	9f 90       	pop	r9
 4c2:	8f 90       	pop	r8
 4c4:	08 95       	ret

000004c6 <spi_init_master>:
	return(SPDR);				/* Return received data */
}
void spi_init_master(void)
{
	/* Slave select as PA4 and PB0 */
	DDRA |= (1<<0);
 4c6:	8a b3       	in	r24, 0x1a	; 26
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<4);
 4cc:	87 b3       	in	r24, 0x17	; 23
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	87 bb       	out	0x17, r24	; 23
	
	/* MOSI and clock as output */
	DDRB |= ((1<<5) | (1<<7));
 4d2:	87 b3       	in	r24, 0x17	; 23
 4d4:	80 6a       	ori	r24, 0xA0	; 160
 4d6:	87 bb       	out	0x17, r24	; 23
	
	/* SPI init */
	SPCR |= ((1<<SPE) | (1<<MSTR) | (1<<CPHA) | (1<<SPR0));
 4d8:	8d b1       	in	r24, 0x0d	; 13
 4da:	85 65       	ori	r24, 0x55	; 85
 4dc:	8d b9       	out	0x0d, r24	; 13
	
	/* Disable interrupt */
	SPSR &= ~(1<<SPI2X);
 4de:	8e b1       	in	r24, 0x0e	; 14
 4e0:	8e 7f       	andi	r24, 0xFE	; 254
 4e2:	8e b9       	out	0x0e, r24	; 14
 4e4:	08 95       	ret

000004e6 <spi_transmit>:
}

void spi_transmit(uint8_t data)
{	
	/* Start transmission */
	SPDR = data;
 4e6:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 4e8:	77 9b       	sbis	0x0e, 7	; 14
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <spi_transmit+0x2>
}
 4ec:	08 95       	ret

000004ee <spi_tranciever>:

uint8_t spi_tranciever(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 4ee:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 4f0:	77 9b       	sbis	0x0e, 7	; 14
 4f2:	fe cf       	rjmp	.-4      	; 0x4f0 <spi_tranciever+0x2>
	
	/* return data register */
	return (SPDR);
 4f4:	8f b1       	in	r24, 0x0f	; 15
 4f6:	08 95       	ret

000004f8 <__subsf3>:
 4f8:	50 58       	subi	r21, 0x80	; 128

000004fa <__addsf3>:
 4fa:	bb 27       	eor	r27, r27
 4fc:	aa 27       	eor	r26, r26
 4fe:	0e 94 94 02 	call	0x528	; 0x528 <__addsf3x>
 502:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>
 506:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_pscA>
 50a:	38 f0       	brcs	.+14     	; 0x51a <__addsf3+0x20>
 50c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscB>
 510:	20 f0       	brcs	.+8      	; 0x51a <__addsf3+0x20>
 512:	39 f4       	brne	.+14     	; 0x522 <__addsf3+0x28>
 514:	9f 3f       	cpi	r25, 0xFF	; 255
 516:	19 f4       	brne	.+6      	; 0x51e <__addsf3+0x24>
 518:	26 f4       	brtc	.+8      	; 0x522 <__addsf3+0x28>
 51a:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_nan>
 51e:	0e f4       	brtc	.+2      	; 0x522 <__addsf3+0x28>
 520:	e0 95       	com	r30
 522:	e7 fb       	bst	r30, 7
 524:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>

00000528 <__addsf3x>:
 528:	e9 2f       	mov	r30, r25
 52a:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_split3>
 52e:	58 f3       	brcs	.-42     	; 0x506 <__addsf3+0xc>
 530:	ba 17       	cp	r27, r26
 532:	62 07       	cpc	r22, r18
 534:	73 07       	cpc	r23, r19
 536:	84 07       	cpc	r24, r20
 538:	95 07       	cpc	r25, r21
 53a:	20 f0       	brcs	.+8      	; 0x544 <__addsf3x+0x1c>
 53c:	79 f4       	brne	.+30     	; 0x55c <__addsf3x+0x34>
 53e:	a6 f5       	brtc	.+104    	; 0x5a8 <__addsf3x+0x80>
 540:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_zero>
 544:	0e f4       	brtc	.+2      	; 0x548 <__addsf3x+0x20>
 546:	e0 95       	com	r30
 548:	0b 2e       	mov	r0, r27
 54a:	ba 2f       	mov	r27, r26
 54c:	a0 2d       	mov	r26, r0
 54e:	0b 01       	movw	r0, r22
 550:	b9 01       	movw	r22, r18
 552:	90 01       	movw	r18, r0
 554:	0c 01       	movw	r0, r24
 556:	ca 01       	movw	r24, r20
 558:	a0 01       	movw	r20, r0
 55a:	11 24       	eor	r1, r1
 55c:	ff 27       	eor	r31, r31
 55e:	59 1b       	sub	r21, r25
 560:	99 f0       	breq	.+38     	; 0x588 <__addsf3x+0x60>
 562:	59 3f       	cpi	r21, 0xF9	; 249
 564:	50 f4       	brcc	.+20     	; 0x57a <__addsf3x+0x52>
 566:	50 3e       	cpi	r21, 0xE0	; 224
 568:	68 f1       	brcs	.+90     	; 0x5c4 <__addsf3x+0x9c>
 56a:	1a 16       	cp	r1, r26
 56c:	f0 40       	sbci	r31, 0x00	; 0
 56e:	a2 2f       	mov	r26, r18
 570:	23 2f       	mov	r18, r19
 572:	34 2f       	mov	r19, r20
 574:	44 27       	eor	r20, r20
 576:	58 5f       	subi	r21, 0xF8	; 248
 578:	f3 cf       	rjmp	.-26     	; 0x560 <__addsf3x+0x38>
 57a:	46 95       	lsr	r20
 57c:	37 95       	ror	r19
 57e:	27 95       	ror	r18
 580:	a7 95       	ror	r26
 582:	f0 40       	sbci	r31, 0x00	; 0
 584:	53 95       	inc	r21
 586:	c9 f7       	brne	.-14     	; 0x57a <__addsf3x+0x52>
 588:	7e f4       	brtc	.+30     	; 0x5a8 <__addsf3x+0x80>
 58a:	1f 16       	cp	r1, r31
 58c:	ba 0b       	sbc	r27, r26
 58e:	62 0b       	sbc	r22, r18
 590:	73 0b       	sbc	r23, r19
 592:	84 0b       	sbc	r24, r20
 594:	ba f0       	brmi	.+46     	; 0x5c4 <__addsf3x+0x9c>
 596:	91 50       	subi	r25, 0x01	; 1
 598:	a1 f0       	breq	.+40     	; 0x5c2 <__addsf3x+0x9a>
 59a:	ff 0f       	add	r31, r31
 59c:	bb 1f       	adc	r27, r27
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	c2 f7       	brpl	.-16     	; 0x596 <__addsf3x+0x6e>
 5a6:	0e c0       	rjmp	.+28     	; 0x5c4 <__addsf3x+0x9c>
 5a8:	ba 0f       	add	r27, r26
 5aa:	62 1f       	adc	r22, r18
 5ac:	73 1f       	adc	r23, r19
 5ae:	84 1f       	adc	r24, r20
 5b0:	48 f4       	brcc	.+18     	; 0x5c4 <__addsf3x+0x9c>
 5b2:	87 95       	ror	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b7 95       	ror	r27
 5ba:	f7 95       	ror	r31
 5bc:	9e 3f       	cpi	r25, 0xFE	; 254
 5be:	08 f0       	brcs	.+2      	; 0x5c2 <__addsf3x+0x9a>
 5c0:	b0 cf       	rjmp	.-160    	; 0x522 <__addsf3+0x28>
 5c2:	93 95       	inc	r25
 5c4:	88 0f       	add	r24, r24
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <__addsf3x+0xa2>
 5c8:	99 27       	eor	r25, r25
 5ca:	ee 0f       	add	r30, r30
 5cc:	97 95       	ror	r25
 5ce:	87 95       	ror	r24
 5d0:	08 95       	ret

000005d2 <__divsf3>:
 5d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__divsf3x>
 5d6:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>
 5da:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscB>
 5de:	58 f0       	brcs	.+22     	; 0x5f6 <__divsf3+0x24>
 5e0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_pscA>
 5e4:	40 f0       	brcs	.+16     	; 0x5f6 <__divsf3+0x24>
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <__divsf3+0x20>
 5e8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ea:	29 f0       	breq	.+10     	; 0x5f6 <__divsf3+0x24>
 5ec:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>
 5f0:	51 11       	cpse	r21, r1
 5f2:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_szero>
 5f6:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_nan>

000005fa <__divsf3x>:
 5fa:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_split3>
 5fe:	68 f3       	brcs	.-38     	; 0x5da <__divsf3+0x8>

00000600 <__divsf3_pse>:
 600:	99 23       	and	r25, r25
 602:	b1 f3       	breq	.-20     	; 0x5f0 <__divsf3+0x1e>
 604:	55 23       	and	r21, r21
 606:	91 f3       	breq	.-28     	; 0x5ec <__divsf3+0x1a>
 608:	95 1b       	sub	r25, r21
 60a:	55 0b       	sbc	r21, r21
 60c:	bb 27       	eor	r27, r27
 60e:	aa 27       	eor	r26, r26
 610:	62 17       	cp	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	38 f0       	brcs	.+14     	; 0x626 <__divsf3_pse+0x26>
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	44 1f       	adc	r20, r20
 622:	aa 1f       	adc	r26, r26
 624:	a9 f3       	breq	.-22     	; 0x610 <__divsf3_pse+0x10>
 626:	35 d0       	rcall	.+106    	; 0x692 <__divsf3_pse+0x92>
 628:	0e 2e       	mov	r0, r30
 62a:	3a f0       	brmi	.+14     	; 0x63a <__divsf3_pse+0x3a>
 62c:	e0 e8       	ldi	r30, 0x80	; 128
 62e:	32 d0       	rcall	.+100    	; 0x694 <__divsf3_pse+0x94>
 630:	91 50       	subi	r25, 0x01	; 1
 632:	50 40       	sbci	r21, 0x00	; 0
 634:	e6 95       	lsr	r30
 636:	00 1c       	adc	r0, r0
 638:	ca f7       	brpl	.-14     	; 0x62c <__divsf3_pse+0x2c>
 63a:	2b d0       	rcall	.+86     	; 0x692 <__divsf3_pse+0x92>
 63c:	fe 2f       	mov	r31, r30
 63e:	29 d0       	rcall	.+82     	; 0x692 <__divsf3_pse+0x92>
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	bb 1f       	adc	r27, r27
 648:	26 17       	cp	r18, r22
 64a:	37 07       	cpc	r19, r23
 64c:	48 07       	cpc	r20, r24
 64e:	ab 07       	cpc	r26, r27
 650:	b0 e8       	ldi	r27, 0x80	; 128
 652:	09 f0       	breq	.+2      	; 0x656 <__divsf3_pse+0x56>
 654:	bb 0b       	sbc	r27, r27
 656:	80 2d       	mov	r24, r0
 658:	bf 01       	movw	r22, r30
 65a:	ff 27       	eor	r31, r31
 65c:	93 58       	subi	r25, 0x83	; 131
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	3a f0       	brmi	.+14     	; 0x670 <__divsf3_pse+0x70>
 662:	9e 3f       	cpi	r25, 0xFE	; 254
 664:	51 05       	cpc	r21, r1
 666:	78 f0       	brcs	.+30     	; 0x686 <__divsf3_pse+0x86>
 668:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>
 66c:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_szero>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	e4 f3       	brlt	.-8      	; 0x66c <__divsf3_pse+0x6c>
 674:	98 3e       	cpi	r25, 0xE8	; 232
 676:	d4 f3       	brlt	.-12     	; 0x66c <__divsf3_pse+0x6c>
 678:	86 95       	lsr	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f7 95       	ror	r31
 682:	9f 5f       	subi	r25, 0xFF	; 255
 684:	c9 f7       	brne	.-14     	; 0x678 <__divsf3_pse+0x78>
 686:	88 0f       	add	r24, r24
 688:	91 1d       	adc	r25, r1
 68a:	96 95       	lsr	r25
 68c:	87 95       	ror	r24
 68e:	97 f9       	bld	r25, 7
 690:	08 95       	ret
 692:	e1 e0       	ldi	r30, 0x01	; 1
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	88 1f       	adc	r24, r24
 69a:	bb 1f       	adc	r27, r27
 69c:	62 17       	cp	r22, r18
 69e:	73 07       	cpc	r23, r19
 6a0:	84 07       	cpc	r24, r20
 6a2:	ba 07       	cpc	r27, r26
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__divsf3_pse+0xae>
 6a6:	62 1b       	sub	r22, r18
 6a8:	73 0b       	sbc	r23, r19
 6aa:	84 0b       	sbc	r24, r20
 6ac:	ba 0b       	sbc	r27, r26
 6ae:	ee 1f       	adc	r30, r30
 6b0:	88 f7       	brcc	.-30     	; 0x694 <__divsf3_pse+0x94>
 6b2:	e0 95       	com	r30
 6b4:	08 95       	ret

000006b6 <__fixunssfsi>:
 6b6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_splitA>
 6ba:	88 f0       	brcs	.+34     	; 0x6de <__fixunssfsi+0x28>
 6bc:	9f 57       	subi	r25, 0x7F	; 127
 6be:	98 f0       	brcs	.+38     	; 0x6e6 <__fixunssfsi+0x30>
 6c0:	b9 2f       	mov	r27, r25
 6c2:	99 27       	eor	r25, r25
 6c4:	b7 51       	subi	r27, 0x17	; 23
 6c6:	b0 f0       	brcs	.+44     	; 0x6f4 <__fixunssfsi+0x3e>
 6c8:	e1 f0       	breq	.+56     	; 0x702 <__fixunssfsi+0x4c>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	1a f0       	brmi	.+6      	; 0x6da <__fixunssfsi+0x24>
 6d4:	ba 95       	dec	r27
 6d6:	c9 f7       	brne	.-14     	; 0x6ca <__fixunssfsi+0x14>
 6d8:	14 c0       	rjmp	.+40     	; 0x702 <__fixunssfsi+0x4c>
 6da:	b1 30       	cpi	r27, 0x01	; 1
 6dc:	91 f0       	breq	.+36     	; 0x702 <__fixunssfsi+0x4c>
 6de:	0e 94 11 04 	call	0x822	; 0x822 <__fp_zero>
 6e2:	b1 e0       	ldi	r27, 0x01	; 1
 6e4:	08 95       	ret
 6e6:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_zero>
 6ea:	67 2f       	mov	r22, r23
 6ec:	78 2f       	mov	r23, r24
 6ee:	88 27       	eor	r24, r24
 6f0:	b8 5f       	subi	r27, 0xF8	; 248
 6f2:	39 f0       	breq	.+14     	; 0x702 <__fixunssfsi+0x4c>
 6f4:	b9 3f       	cpi	r27, 0xF9	; 249
 6f6:	cc f3       	brlt	.-14     	; 0x6ea <__fixunssfsi+0x34>
 6f8:	86 95       	lsr	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b3 95       	inc	r27
 700:	d9 f7       	brne	.-10     	; 0x6f8 <__fixunssfsi+0x42>
 702:	3e f4       	brtc	.+14     	; 0x712 <__fixunssfsi+0x5c>
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	08 95       	ret

00000714 <__floatunsisf>:
 714:	e8 94       	clt
 716:	09 c0       	rjmp	.+18     	; 0x72a <__floatsisf+0x12>

00000718 <__floatsisf>:
 718:	97 fb       	bst	r25, 7
 71a:	3e f4       	brtc	.+14     	; 0x72a <__floatsisf+0x12>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	99 23       	and	r25, r25
 72c:	a9 f0       	breq	.+42     	; 0x758 <__floatsisf+0x40>
 72e:	f9 2f       	mov	r31, r25
 730:	96 e9       	ldi	r25, 0x96	; 150
 732:	bb 27       	eor	r27, r27
 734:	93 95       	inc	r25
 736:	f6 95       	lsr	r31
 738:	87 95       	ror	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f1 11       	cpse	r31, r1
 742:	f8 cf       	rjmp	.-16     	; 0x734 <__floatsisf+0x1c>
 744:	fa f4       	brpl	.+62     	; 0x784 <__floatsisf+0x6c>
 746:	bb 0f       	add	r27, r27
 748:	11 f4       	brne	.+4      	; 0x74e <__floatsisf+0x36>
 74a:	60 ff       	sbrs	r22, 0
 74c:	1b c0       	rjmp	.+54     	; 0x784 <__floatsisf+0x6c>
 74e:	6f 5f       	subi	r22, 0xFF	; 255
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	16 c0       	rjmp	.+44     	; 0x784 <__floatsisf+0x6c>
 758:	88 23       	and	r24, r24
 75a:	11 f0       	breq	.+4      	; 0x760 <__floatsisf+0x48>
 75c:	96 e9       	ldi	r25, 0x96	; 150
 75e:	11 c0       	rjmp	.+34     	; 0x782 <__floatsisf+0x6a>
 760:	77 23       	and	r23, r23
 762:	21 f0       	breq	.+8      	; 0x76c <__floatsisf+0x54>
 764:	9e e8       	ldi	r25, 0x8E	; 142
 766:	87 2f       	mov	r24, r23
 768:	76 2f       	mov	r23, r22
 76a:	05 c0       	rjmp	.+10     	; 0x776 <__floatsisf+0x5e>
 76c:	66 23       	and	r22, r22
 76e:	71 f0       	breq	.+28     	; 0x78c <__floatsisf+0x74>
 770:	96 e8       	ldi	r25, 0x86	; 134
 772:	86 2f       	mov	r24, r22
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	2a f0       	brmi	.+10     	; 0x784 <__floatsisf+0x6c>
 77a:	9a 95       	dec	r25
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	da f7       	brpl	.-10     	; 0x77a <__floatsisf+0x62>
 784:	88 0f       	add	r24, r24
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret

0000078e <__fp_inf>:
 78e:	97 f9       	bld	r25, 7
 790:	9f 67       	ori	r25, 0x7F	; 127
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	08 95       	ret

0000079a <__fp_nan>:
 79a:	9f ef       	ldi	r25, 0xFF	; 255
 79c:	80 ec       	ldi	r24, 0xC0	; 192
 79e:	08 95       	ret

000007a0 <__fp_pscA>:
 7a0:	00 24       	eor	r0, r0
 7a2:	0a 94       	dec	r0
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	18 06       	cpc	r1, r24
 7aa:	09 06       	cpc	r0, r25
 7ac:	08 95       	ret

000007ae <__fp_pscB>:
 7ae:	00 24       	eor	r0, r0
 7b0:	0a 94       	dec	r0
 7b2:	12 16       	cp	r1, r18
 7b4:	13 06       	cpc	r1, r19
 7b6:	14 06       	cpc	r1, r20
 7b8:	05 06       	cpc	r0, r21
 7ba:	08 95       	ret

000007bc <__fp_round>:
 7bc:	09 2e       	mov	r0, r25
 7be:	03 94       	inc	r0
 7c0:	00 0c       	add	r0, r0
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__fp_round+0xc>
 7c4:	88 23       	and	r24, r24
 7c6:	52 f0       	brmi	.+20     	; 0x7dc <__fp_round+0x20>
 7c8:	bb 0f       	add	r27, r27
 7ca:	40 f4       	brcc	.+16     	; 0x7dc <__fp_round+0x20>
 7cc:	bf 2b       	or	r27, r31
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0x18>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__fp_round+0x20>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	08 95       	ret

000007de <__fp_split3>:
 7de:	57 fd       	sbrc	r21, 7
 7e0:	90 58       	subi	r25, 0x80	; 128
 7e2:	44 0f       	add	r20, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	59 f0       	breq	.+22     	; 0x7fe <__fp_splitA+0x10>
 7e8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ea:	71 f0       	breq	.+28     	; 0x808 <__fp_splitA+0x1a>
 7ec:	47 95       	ror	r20

000007ee <__fp_splitA>:
 7ee:	88 0f       	add	r24, r24
 7f0:	97 fb       	bst	r25, 7
 7f2:	99 1f       	adc	r25, r25
 7f4:	61 f0       	breq	.+24     	; 0x80e <__fp_splitA+0x20>
 7f6:	9f 3f       	cpi	r25, 0xFF	; 255
 7f8:	79 f0       	breq	.+30     	; 0x818 <__fp_splitA+0x2a>
 7fa:	87 95       	ror	r24
 7fc:	08 95       	ret
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	55 1f       	adc	r21, r21
 806:	f2 cf       	rjmp	.-28     	; 0x7ec <__fp_split3+0xe>
 808:	46 95       	lsr	r20
 80a:	f1 df       	rcall	.-30     	; 0x7ee <__fp_splitA>
 80c:	08 c0       	rjmp	.+16     	; 0x81e <__fp_splitA+0x30>
 80e:	16 16       	cp	r1, r22
 810:	17 06       	cpc	r1, r23
 812:	18 06       	cpc	r1, r24
 814:	99 1f       	adc	r25, r25
 816:	f1 cf       	rjmp	.-30     	; 0x7fa <__fp_splitA+0xc>
 818:	86 95       	lsr	r24
 81a:	71 05       	cpc	r23, r1
 81c:	61 05       	cpc	r22, r1
 81e:	08 94       	sec
 820:	08 95       	ret

00000822 <__fp_zero>:
 822:	e8 94       	clt

00000824 <__fp_szero>:
 824:	bb 27       	eor	r27, r27
 826:	66 27       	eor	r22, r22
 828:	77 27       	eor	r23, r23
 82a:	cb 01       	movw	r24, r22
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret
 830:	16 f0       	brts	.+4      	; 0x836 <__fp_szero+0x12>
 832:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_mpack>
 836:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_nan>
 83a:	68 94       	set
 83c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>

00000840 <log>:
 840:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_splitA>
 844:	a8 f3       	brcs	.-22     	; 0x830 <__fp_szero+0xc>
 846:	99 23       	and	r25, r25
 848:	c1 f3       	breq	.-16     	; 0x83a <__fp_szero+0x16>
 84a:	ae f3       	brts	.-22     	; 0x836 <__fp_szero+0x12>
 84c:	df 93       	push	r29
 84e:	cf 93       	push	r28
 850:	1f 93       	push	r17
 852:	0f 93       	push	r16
 854:	ff 92       	push	r15
 856:	c9 2f       	mov	r28, r25
 858:	dd 27       	eor	r29, r29
 85a:	88 23       	and	r24, r24
 85c:	2a f0       	brmi	.+10     	; 0x868 <log+0x28>
 85e:	21 97       	sbiw	r28, 0x01	; 1
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	da f7       	brpl	.-10     	; 0x85e <log+0x1e>
 868:	20 e0       	ldi	r18, 0x00	; 0
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	40 e8       	ldi	r20, 0x80	; 128
 86e:	5f eb       	ldi	r21, 0xBF	; 191
 870:	9f e3       	ldi	r25, 0x3F	; 63
 872:	88 39       	cpi	r24, 0x98	; 152
 874:	20 f0       	brcs	.+8      	; 0x87e <log+0x3e>
 876:	80 3e       	cpi	r24, 0xE0	; 224
 878:	38 f0       	brcs	.+14     	; 0x888 <log+0x48>
 87a:	21 96       	adiw	r28, 0x01	; 1
 87c:	8f 77       	andi	r24, 0x7F	; 127
 87e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__addsf3>
 882:	e4 e5       	ldi	r30, 0x54	; 84
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	04 c0       	rjmp	.+8      	; 0x890 <log+0x50>
 888:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__addsf3>
 88c:	e1 e8       	ldi	r30, 0x81	; 129
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_powser>
 894:	8b 01       	movw	r16, r22
 896:	be 01       	movw	r22, r28
 898:	ec 01       	movw	r28, r24
 89a:	fb 2e       	mov	r15, r27
 89c:	6f 57       	subi	r22, 0x7F	; 127
 89e:	71 09       	sbc	r23, r1
 8a0:	75 95       	asr	r23
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 0b       	sbc	r24, r24
 8a6:	99 0b       	sbc	r25, r25
 8a8:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
 8ac:	28 e1       	ldi	r18, 0x18	; 24
 8ae:	32 e7       	ldi	r19, 0x72	; 114
 8b0:	41 e3       	ldi	r20, 0x31	; 49
 8b2:	5f e3       	ldi	r21, 0x3F	; 63
 8b4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 8b8:	af 2d       	mov	r26, r15
 8ba:	98 01       	movw	r18, r16
 8bc:	ae 01       	movw	r20, r28
 8be:	ff 90       	pop	r15
 8c0:	0f 91       	pop	r16
 8c2:	1f 91       	pop	r17
 8c4:	cf 91       	pop	r28
 8c6:	df 91       	pop	r29
 8c8:	0e 94 94 02 	call	0x528	; 0x528 <__addsf3x>
 8cc:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>

000008d0 <__mulsf3>:
 8d0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 8d4:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>
 8d8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_pscA>
 8dc:	38 f0       	brcs	.+14     	; 0x8ec <__mulsf3+0x1c>
 8de:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscB>
 8e2:	20 f0       	brcs	.+8      	; 0x8ec <__mulsf3+0x1c>
 8e4:	95 23       	and	r25, r21
 8e6:	11 f0       	breq	.+4      	; 0x8ec <__mulsf3+0x1c>
 8e8:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>
 8ec:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_nan>
 8f0:	11 24       	eor	r1, r1
 8f2:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_szero>

000008f6 <__mulsf3x>:
 8f6:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_split3>
 8fa:	70 f3       	brcs	.-36     	; 0x8d8 <__mulsf3+0x8>

000008fc <__mulsf3_pse>:
 8fc:	95 9f       	mul	r25, r21
 8fe:	c1 f3       	breq	.-16     	; 0x8f0 <__mulsf3+0x20>
 900:	95 0f       	add	r25, r21
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	55 1f       	adc	r21, r21
 906:	62 9f       	mul	r22, r18
 908:	f0 01       	movw	r30, r0
 90a:	72 9f       	mul	r23, r18
 90c:	bb 27       	eor	r27, r27
 90e:	f0 0d       	add	r31, r0
 910:	b1 1d       	adc	r27, r1
 912:	63 9f       	mul	r22, r19
 914:	aa 27       	eor	r26, r26
 916:	f0 0d       	add	r31, r0
 918:	b1 1d       	adc	r27, r1
 91a:	aa 1f       	adc	r26, r26
 91c:	64 9f       	mul	r22, r20
 91e:	66 27       	eor	r22, r22
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	66 1f       	adc	r22, r22
 926:	82 9f       	mul	r24, r18
 928:	22 27       	eor	r18, r18
 92a:	b0 0d       	add	r27, r0
 92c:	a1 1d       	adc	r26, r1
 92e:	62 1f       	adc	r22, r18
 930:	73 9f       	mul	r23, r19
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	62 1f       	adc	r22, r18
 938:	83 9f       	mul	r24, r19
 93a:	a0 0d       	add	r26, r0
 93c:	61 1d       	adc	r22, r1
 93e:	22 1f       	adc	r18, r18
 940:	74 9f       	mul	r23, r20
 942:	33 27       	eor	r19, r19
 944:	a0 0d       	add	r26, r0
 946:	61 1d       	adc	r22, r1
 948:	23 1f       	adc	r18, r19
 94a:	84 9f       	mul	r24, r20
 94c:	60 0d       	add	r22, r0
 94e:	21 1d       	adc	r18, r1
 950:	82 2f       	mov	r24, r18
 952:	76 2f       	mov	r23, r22
 954:	6a 2f       	mov	r22, r26
 956:	11 24       	eor	r1, r1
 958:	9f 57       	subi	r25, 0x7F	; 127
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	9a f0       	brmi	.+38     	; 0x984 <__mulsf3_pse+0x88>
 95e:	f1 f0       	breq	.+60     	; 0x99c <__mulsf3_pse+0xa0>
 960:	88 23       	and	r24, r24
 962:	4a f0       	brmi	.+18     	; 0x976 <__mulsf3_pse+0x7a>
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	bb 1f       	adc	r27, r27
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	91 50       	subi	r25, 0x01	; 1
 972:	50 40       	sbci	r21, 0x00	; 0
 974:	a9 f7       	brne	.-22     	; 0x960 <__mulsf3_pse+0x64>
 976:	9e 3f       	cpi	r25, 0xFE	; 254
 978:	51 05       	cpc	r21, r1
 97a:	80 f0       	brcs	.+32     	; 0x99c <__mulsf3_pse+0xa0>
 97c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>
 980:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_szero>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	e4 f3       	brlt	.-8      	; 0x980 <__mulsf3_pse+0x84>
 988:	98 3e       	cpi	r25, 0xE8	; 232
 98a:	d4 f3       	brlt	.-12     	; 0x980 <__mulsf3_pse+0x84>
 98c:	86 95       	lsr	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	f7 95       	ror	r31
 996:	e7 95       	ror	r30
 998:	9f 5f       	subi	r25, 0xFF	; 255
 99a:	c1 f7       	brne	.-16     	; 0x98c <__mulsf3_pse+0x90>
 99c:	fe 2b       	or	r31, r30
 99e:	88 0f       	add	r24, r24
 9a0:	91 1d       	adc	r25, r1
 9a2:	96 95       	lsr	r25
 9a4:	87 95       	ror	r24
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret

000009aa <__fp_mpack>:
 9aa:	9f 3f       	cpi	r25, 0xFF	; 255
 9ac:	31 f0       	breq	.+12     	; 0x9ba <__fp_mpack_finite+0xc>

000009ae <__fp_mpack_finite>:
 9ae:	91 50       	subi	r25, 0x01	; 1
 9b0:	20 f4       	brcc	.+8      	; 0x9ba <__fp_mpack_finite+0xc>
 9b2:	87 95       	ror	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b7 95       	ror	r27
 9ba:	88 0f       	add	r24, r24
 9bc:	91 1d       	adc	r25, r1
 9be:	96 95       	lsr	r25
 9c0:	87 95       	ror	r24
 9c2:	97 f9       	bld	r25, 7
 9c4:	08 95       	ret

000009c6 <__fp_powser>:
 9c6:	df 93       	push	r29
 9c8:	cf 93       	push	r28
 9ca:	1f 93       	push	r17
 9cc:	0f 93       	push	r16
 9ce:	ff 92       	push	r15
 9d0:	ef 92       	push	r14
 9d2:	df 92       	push	r13
 9d4:	7b 01       	movw	r14, r22
 9d6:	8c 01       	movw	r16, r24
 9d8:	68 94       	set
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <__fp_powser+0x22>
 9dc:	da 2e       	mov	r13, r26
 9de:	ef 01       	movw	r28, r30
 9e0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 9e4:	fe 01       	movw	r30, r28
 9e6:	e8 94       	clt
 9e8:	a5 91       	lpm	r26, Z+
 9ea:	25 91       	lpm	r18, Z+
 9ec:	35 91       	lpm	r19, Z+
 9ee:	45 91       	lpm	r20, Z+
 9f0:	55 91       	lpm	r21, Z+
 9f2:	a6 f3       	brts	.-24     	; 0x9dc <__fp_powser+0x16>
 9f4:	ef 01       	movw	r28, r30
 9f6:	0e 94 94 02 	call	0x528	; 0x528 <__addsf3x>
 9fa:	fe 01       	movw	r30, r28
 9fc:	97 01       	movw	r18, r14
 9fe:	a8 01       	movw	r20, r16
 a00:	da 94       	dec	r13
 a02:	69 f7       	brne	.-38     	; 0x9de <__fp_powser+0x18>
 a04:	df 90       	pop	r13
 a06:	ef 90       	pop	r14
 a08:	ff 90       	pop	r15
 a0a:	0f 91       	pop	r16
 a0c:	1f 91       	pop	r17
 a0e:	cf 91       	pop	r28
 a10:	df 91       	pop	r29
 a12:	08 95       	ret

00000a14 <__udivmodsi4>:
 a14:	a1 e2       	ldi	r26, 0x21	; 33
 a16:	1a 2e       	mov	r1, r26
 a18:	aa 1b       	sub	r26, r26
 a1a:	bb 1b       	sub	r27, r27
 a1c:	fd 01       	movw	r30, r26
 a1e:	0d c0       	rjmp	.+26     	; 0xa3a <__udivmodsi4_ep>

00000a20 <__udivmodsi4_loop>:
 a20:	aa 1f       	adc	r26, r26
 a22:	bb 1f       	adc	r27, r27
 a24:	ee 1f       	adc	r30, r30
 a26:	ff 1f       	adc	r31, r31
 a28:	a2 17       	cp	r26, r18
 a2a:	b3 07       	cpc	r27, r19
 a2c:	e4 07       	cpc	r30, r20
 a2e:	f5 07       	cpc	r31, r21
 a30:	20 f0       	brcs	.+8      	; 0xa3a <__udivmodsi4_ep>
 a32:	a2 1b       	sub	r26, r18
 a34:	b3 0b       	sbc	r27, r19
 a36:	e4 0b       	sbc	r30, r20
 a38:	f5 0b       	sbc	r31, r21

00000a3a <__udivmodsi4_ep>:
 a3a:	66 1f       	adc	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	1a 94       	dec	r1
 a44:	69 f7       	brne	.-38     	; 0xa20 <__udivmodsi4_loop>
 a46:	60 95       	com	r22
 a48:	70 95       	com	r23
 a4a:	80 95       	com	r24
 a4c:	90 95       	com	r25
 a4e:	9b 01       	movw	r18, r22
 a50:	ac 01       	movw	r20, r24
 a52:	bd 01       	movw	r22, r26
 a54:	cf 01       	movw	r24, r30
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
