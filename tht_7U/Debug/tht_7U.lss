
tht_7U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800060  00800060  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b91  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000749  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000561  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 36       	cpi	r26, 0x6D	; 109
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "max.h"
#include "define.h"

int main(void)
{
	spi_init_master();
  7c:	0e 94 b7 00 	call	0x16e	; 0x16e <spi_init_master>
	MAX31865_RTD_configure(True, True, False, False, MAX31865_FAULT_DETECTION_NONE, True, True, 0x0000, 0x00ff);
  80:	88 24       	eor	r8, r8
  82:	8a 94       	dec	r8
  84:	91 2c       	mov	r9, r1
  86:	a1 2c       	mov	r10, r1
  88:	b1 2c       	mov	r11, r1
  8a:	cc 24       	eor	r12, r12
  8c:	c3 94       	inc	r12
  8e:	ee 24       	eor	r14, r14
  90:	e3 94       	inc	r14
  92:	00 e0       	ldi	r16, 0x00	; 0
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 75 00 	call	0xea	; 0xea <MAX31865_RTD_configure>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x26>

000000a4 <MAX31865_RTD_reconfigure>:
	
	MAX31865_RTD_reconfigure(True);
}

void MAX31865_RTD_reconfigure(uint8_t all)
{
  a4:	cf 93       	push	r28
	if(all)
  a6:	88 23       	and	r24, r24
  a8:	b9 f0       	breq	.+46     	; 0xd8 <MAX31865_RTD_reconfigure+0x34>
	{
		uint8_t threshold = 0;
		spi_transmit(0x83);
  aa:	83 e8       	ldi	r24, 0x83	; 131
  ac:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
		threshold = ((configure_high_threshold >> 8) & 0x00ff);
  b0:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <configure_high_threshold+0x1>
		spi_transmit(threshold);
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
		threshold |= ((configure_high_threshold) & 0x00ff);
  ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <configure_high_threshold>
		spi_transmit(threshold);
  be:	8c 2b       	or	r24, r28
  c0:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
		threshold = ((configure_low_threshold >> 8) & 0x00ff);
  c4:	c0 91 67 00 	lds	r28, 0x0067	; 0x800067 <configure_low_threshold+0x1>
		spi_transmit(threshold);
  c8:	8c 2f       	mov	r24, r28
  ca:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
		threshold |= ((configure_low_threshold) & 0x00ff);
  ce:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <configure_low_threshold>
		spi_transmit(threshold);
  d2:	8c 2b       	or	r24, r28
  d4:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
	}
	
	spi_transmit(0x80);
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
	spi_transmit(configure_control_bits);	
  de:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <configure_control_bits>
  e2:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit>
}
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <MAX31865_RTD_configure>:
#include "max.h"
#include "spi.h"
#include "define.h"

void MAX31865_RTD_configure(uint8_t v_bias, uint8_t conversion_mode, uint8_t single_shot, uint8_t three_wire, uint16_t fault_detection, uint8_t fault_status, uint8_t filter, uint16_t low_threshold, uint16_t high_threshold)
{
  ea:	8f 92       	push	r8
  ec:	9f 92       	push	r9
  ee:	af 92       	push	r10
  f0:	bf 92       	push	r11
  f2:	cf 92       	push	r12
  f4:	ef 92       	push	r14
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t control_bits = 0;
	control_bits |= (v_bias ? 0x80 : 0);
  fe:	88 23       	and	r24, r24
 100:	11 f0       	breq	.+4      	; 0x106 <MAX31865_RTD_configure+0x1c>
 102:	90 e8       	ldi	r25, 0x80	; 128
 104:	01 c0       	rjmp	.+2      	; 0x108 <MAX31865_RTD_configure+0x1e>
 106:	90 e0       	ldi	r25, 0x00	; 0
	control_bits |= (conversion_mode ? 0x40 : 0);
 108:	66 23       	and	r22, r22
 10a:	11 f0       	breq	.+4      	; 0x110 <MAX31865_RTD_configure+0x26>
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	01 c0       	rjmp	.+2      	; 0x112 <MAX31865_RTD_configure+0x28>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	89 2b       	or	r24, r25
	control_bits |= (single_shot ? 0x20 : 0);
 114:	44 23       	and	r20, r20
 116:	11 f0       	breq	.+4      	; 0x11c <MAX31865_RTD_configure+0x32>
 118:	90 e2       	ldi	r25, 0x20	; 32
 11a:	01 c0       	rjmp	.+2      	; 0x11e <MAX31865_RTD_configure+0x34>
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	89 2b       	or	r24, r25
	control_bits |= (three_wire ? 0x10 : 0);
 120:	22 23       	and	r18, r18
 122:	11 f0       	breq	.+4      	; 0x128 <MAX31865_RTD_configure+0x3e>
 124:	90 e1       	ldi	r25, 0x10	; 16
 126:	01 c0       	rjmp	.+2      	; 0x12a <MAX31865_RTD_configure+0x40>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	89 2b       	or	r24, r25
	control_bits |= (fault_detection & 0x001100);
	control_bits |= (fault_status ? 0x02 : 0);
 12c:	ee 20       	and	r14, r14
 12e:	11 f0       	breq	.+4      	; 0x134 <MAX31865_RTD_configure+0x4a>
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	01 c0       	rjmp	.+2      	; 0x136 <MAX31865_RTD_configure+0x4c>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	89 2b       	or	r24, r25
	control_bits |= (filter ? 0x01 : 0);
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	c1 10       	cpse	r12, r1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <MAX31865_RTD_configure+0x56>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	89 2b       	or	r24, r25
	
	configure_control_bits = control_bits;
 142:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <configure_control_bits>
	configure_low_threshold = low_threshold;
 146:	b0 92 67 00 	sts	0x0067, r11	; 0x800067 <configure_low_threshold+0x1>
 14a:	a0 92 66 00 	sts	0x0066, r10	; 0x800066 <configure_low_threshold>
	configure_high_threshold = high_threshold;
 14e:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <configure_high_threshold+0x1>
 152:	80 92 64 00 	sts	0x0064, r8	; 0x800064 <configure_high_threshold>
	
	MAX31865_RTD_reconfigure(True);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <MAX31865_RTD_reconfigure>
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	ef 90       	pop	r14
 162:	cf 90       	pop	r12
 164:	bf 90       	pop	r11
 166:	af 90       	pop	r10
 168:	9f 90       	pop	r9
 16a:	8f 90       	pop	r8
 16c:	08 95       	ret

0000016e <spi_init_master>:
#include "spi.h"

void spi_init_master(void)
{
	/* Slave select as PA4 and PB0 */
	DDRA |= (1<<4);
 16e:	8a b3       	in	r24, 0x1a	; 26
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<0);
 174:	87 b3       	in	r24, 0x17	; 23
 176:	81 60       	ori	r24, 0x01	; 1
 178:	87 bb       	out	0x17, r24	; 23
	
	/* MOSI and clock as output */
	DDRB |= ((1<<5) | (1<<7));
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	80 6a       	ori	r24, 0xA0	; 160
 17e:	87 bb       	out	0x17, r24	; 23
	
	/* SPI init */
	SPCR |= ((1<<SPE) | (1<<MSTR) | (1<<CPHA) | (1<<SPR0));
 180:	8d b1       	in	r24, 0x0d	; 13
 182:	85 65       	ori	r24, 0x55	; 85
 184:	8d b9       	out	0x0d, r24	; 13
	
	/* Disable interrupt */
	SPSR &= ~(1<<SPI2X);
 186:	8e b1       	in	r24, 0x0e	; 14
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	8e b9       	out	0x0e, r24	; 14
 18c:	08 95       	ret

0000018e <spi_transmit>:
}

void spi_transmit(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 18e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 190:	77 9b       	sbis	0x0e, 7	; 14
 192:	fe cf       	rjmp	.-4      	; 0x190 <spi_transmit+0x2>
}
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
